-- Practice Assignment for Midterm
-- Week 4_1_First Practice 

-- All products name, price and description in lower case ordered by their price 
SELECT prod_name, prod_price, prod_desc 
FROM Products
ORDER BY prod_price DESC;

-- List all customer ids of customers who had ordered items in 2012 
SELECT cust_id
FROM Orders
WHERE DATEPART(YY,order_date)='2012';

-- List all order items, their price and quantity, with the square root of their price and sinus of their quantity
SELECT order_item, item_price, SQRT(quantity) AS sqrt_quantity, SIN(quantity) AS sin_quantity 
FROM OrderItems;

-- List all the order_number, cust_id with their order day, order month, and order year in 3 seperate columns,
-- and name those new fields, order_day, order_month, order_year. 
SELECT order_num, cust_id, day(order_date) as order_day, month(order_date) as order_month, year(order_date) as order_year
FROM Orders;

-- List, in a new field called length_cust_name, the length of customer name in desc order.
SELECT LEN(cust_name) AS Length_cust_name
FROM Customers
ORDER BY Length_cust_name DESC;






-- Midterm Practice 2, Week 4_1 Practice 2 
/*
SELECT AVG(prod_price) AS avg_prod_price
FROM Products;

SELECT AVG(prod_price) AS avg_prod_price
FROM Products
WHERE vend_id='DLL01';

SELECT COUNT(*) AS num_cust -- What are we counting now since there are many columns in	Customers?
FROM Customers;

SELECT COUNT(cust_email) AS num_cust -- What are we counting here? 
FROM Customers;



SELECT MAX(prod_price) AS max_quantity
FROM Products;


SELECT SUM(quantity) AS items_odered
FROM Orderitems 
WHERE order_num='20005';

SELECT SUM(item_price*quantity) AS total_price 
FROM Orderitems
WHERE order_num='20005';

SELECT AVG(DISTINCT prod_price) AS avg_price -- What does this means?
FROM Products
WHERE vend_id='DLL01';

SELECT COUNT(*) AS num_items --Wat fucking problems do we have here 
	   MAX(prod_price) as max_prod_price
	   AVG(prod_price) as avg_prod_price 
FROM Products;
*/

--1) NEW FIELD NAMED avg_price of products average price 
SELECT AVG(prod_price) AS avg_price
FROM Products;

--2) Count of all order items, average price, min and max item price by creating 4 new fields, named
--2) count_items, avg_item_price, min_item_price & max_item_price 
SELECT COUNT(*) AS count_items, AVG(item_price) AS avg_item_price, MIN(item_price) AS min_item_price, MAX(item_price) AS max_item_price
FROM OrderItems; 

--3) Sum of all items' quantity, 






2/12/19
--2/12/19
-- DATA GROUPING: Grouping the products that have vend_id= DLL01. 
SELECT COUNT(*) AS count_prod
FROM Products
WHERE vend_id='DLL01';

-- Create Groups: Group # of products count by vend_id.
SELECT vend_id, COUNT(*) AS num_prod 
FROM Products
GROUP BY vend_id;

-- Filtering Groups: Count (*)>=2 
SELECT cust_id, COUNT(*) AS orders
FROM Orders
GROUP BY cust_id
HAVING COUNT (*) >= 2;

-- Filtering Groups: 
SELECT vend_id, COUNT(*) AS num_prod
FROM Products
WHERE prod_price>= 4
GROUP BY vend_id
HAVING COUNT (*)>= 2;

-- Filtering Groups: 
SELECT vend_id, COUNT(*) AS num_prod
FROM Products
GROUP BY vend_id
HAVING COUNT(*) >=2; 

-- Grouping & Data Sorting 
SELECT order_num, COUNT(*) AS items 
FROM Orderitems 
GROUP BY order_num 
HAVING COUNT(*) >= 3
ORDER BY items, order_num;




-- Practice: 
--1) Gimme all the products ID, the count of products ids and its average price grouped by product id
SELECT prod_id, COUNT(*) AS count_prod, AVG(prod_price) AS avg_prod_price 
FROM Products
GROUP BY prod_id; 

--2) List all customer names and its count grouped by customers names and ordered by customer names descreasing order
SELECT cust_name, COUNT(*) AS cust_count 
FROM Customers 
GROUP BY cust_name 
ORDER BY cust_name DESC; 

--3) List all the order items, their average price and count grouped by order items greater than 2 
SELECT 



-- Assignment 02... Redo
--1) Find the list of top 10 employees first and last names and their last names start with either a,j, or p.
SELECT TOP 10 FirstName, LastName 
FROM Employee
WHERE LastName LIKE '[AJP]%'; 

--2) Find the list of employee first and last name, their base rate and title where their base rate is greater than 
-- or equal to to $45 and their job title is not Manager, and order them by last name DESC. 
SELECT FirstName, LastName, BaseRate, Title 
From Employee
WHERE BaseRate>= 45 AND TITLE NOT LIKE '[Manager]%'
ORDER BY LastName DESC;

--3) Create a new field called employee_info where the field has the following format: 
-- Employee first name, employee last name (employee job title), Department name 

SELECT RTRIM(FirstName) + '(' +RTRIM(LastName) + ')' + '(' +RTRIM(Title) + ')' + '(' +RTRIM(DepartmentName) + ')' AS employee_info
FROM Employee;

--4) Find the first and last name of all employees, their title and costForSickAndVacation value (a new field) 
-- For only employee that starts with title s letter. 
SELECT FirstName, LastName, Title, BaseRate*(SickLeaveHours+VacationHours) AS costForSickAndVacation 
FROM Employee
WHERE Title LIKE '[s]%';

 --5) Find the First and Last name of employees, their gender and title, where their title start with the letter p, and
 -- they r not Manager and order this results with the vacation hours DESC;
 SELECT FirstName, LastName, Gender, Title
 FROM Employee 
 WHERE Title LIKE '[p]%' AND TITLE NOT LIKE '[^MANAGER]'
 ORDER BY VacationHours DESC;








